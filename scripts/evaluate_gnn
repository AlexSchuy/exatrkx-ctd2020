#!/usr/bin/env python

# TAKE IN CONFIG FILE & OUTPUT FILE NAME


# System imports
import os
import sys

# External imports
import matplotlib.pyplot as plt
import numpy as np
import argparse

# Pick up local packages
sys.path.append('..')

# Local imports
from GraphLearning.src.trainers import get_trainer
from utils.data_utils import (get_output_dirs, load_config_file, load_config_dir, load_summaries,
                      save_train_history, get_test_data_loader,
                      compute_metrics, save_metrics, draw_sample_xy)

def parse_args():
    """Parse command line arguments."""
    hpo_warning = 'Flag overwrites config value if set, used for HPO and PBT runs primarily'
    parser = argparse.ArgumentParser('train.py')
    add_arg = parser.add_argument
    add_arg('config', nargs='?', default='GraphLearning/configs/pipeline_train.yaml')
    add_arg('results_dir', nargs='?', default='GraphLearning/results/example')
    
    return parser.parse_args()



def main(args):
    config_file = args.config

    config = load_config_file(config_file)
    print('\nConfiguration: \n', config)

    summaries_doublet, summaries_triplet = load_summaries(config)
    print('\nDoublet training summaries: \n', summaries_doublet)
    print('\nTriplet training summaries: \n', summaries_triplet)

    artifact_dir_doublet, artifact_dir_triplet = get_output_dirs(config)
    
    
    # Run Doublet GNN Performance metrics
    
    best_idx_doublet = summaries_doublet.valid_loss.idxmin()
    
    # Build the trainer and load best checkpoint
    trainer_doublet = get_trainer(output_dir=artifact_dir_doublet, gpu=0, **config['doublet']['trainer'])
    trainer_doublet.build_model(optimizer_config=config['doublet']['optimizer'], **config['doublet']['model'])

    best_epoch_doublet = summaries_doublet.epoch.loc[best_idx_doublet]
    trainer_doublet.load_checkpoint(checkpoint_id=best_epoch_doublet)

    print(trainer_doublet.model)
    print('Parameters:', sum(p.numel() for p in trainer_doublet.model.parameters()))
    
    
    # Run Triplet GNN Performance metrics
    
    best_idx_triplet = summaries_triplet.valid_loss.idxmin()
    
    # Build the trainer and load best checkpoint
    trainer_triplet = get_trainer(output_dir=artifact_dir_triplet, gpu=0, **config['triplet']['trainer'])
    trainer_triplet.build_model(optimizer_config=config['doublet']['optimizer'], **config['triplet']['model'])

    best_epoch_triplet = summaries_triplet.epoch.loc[best_idx_triplet]
    trainer_triplet.load_checkpoint(checkpoint_id=best_epoch_triplet)

    print(trainer_triplet.model)
    print('Parameters:', sum(p.numel() for p in trainer_triplet.model.parameters()))

    # Evaluate performance on test dataset
    
    n_test = 16 # CHANGE THIS 80
    
    test_loader_doublet, _ = get_test_data_loader(config, n_test=n_test, gnn="doublet")
    test_preds_doublet, test_targets_doublet = trainer_doublet.device_predict(test_loader_doublet)
    test_metrics_doublet = compute_metrics(test_preds_doublet, test_targets_doublet)
    
    test_loader_triplet, _ = get_test_data_loader(config, n_test=n_test, gnn="triplet")
    test_preds_triplet, test_targets_triplet = trainer_triplet.device_predict(test_loader_triplet)
    test_metrics_triplet = compute_metrics(test_preds_triplet, test_targets_triplet)
    
    # Visualisations
    output_dir = os.path.join(args.results_dir, config['name'])
    os.makedirs(output_dir, exist_ok = True)
    
    save_metrics(summaries_doublet, output_dir, 'doublet', test_preds_doublet, test_targets_doublet, test_metrics_doublet, roc_scale="log")
    save_metrics(summaries_triplet, output_dir, 'triplet', test_preds_triplet, test_targets_triplet, test_metrics_triplet, roc_scale="log")    
    
    training_plots_doublet = save_train_history(summaries_doublet, output_dir, 'doublet')    
    training_plots_triplet = save_train_history(summaries_triplet, output_dir, 'triplet')
    
    
    
    
if __name__ == '__main__':
    
    # Parse the command line
    args = parse_args()
    
    main(args)
